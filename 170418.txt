正则表达式  和grep结合
用来模糊匹配文本的规则的处理工具
^tom  匹配开头是tom的内容
tom$  匹配尾部是tom的
.     匹配任意一个字符 匹配空格 不可匹配换行符
[]    to[am]  toa和tom
[^]   9[^78]  不能匹配9后面出现7、8的数
[-]   8[0-9]  匹配80-89
?     匹配前面的一个项目0或1次  to?msd   匹配tomsd、toomsd
+     匹配前面的一个项目0或多次    to+msd  匹配tomsd toomsd tooomsd .....
*     匹配前面的项目多次 后面可以有任意字符
()    ma(kkt)?x  匹配 max makktx  kkt为一个项目
{n}   [0-9]{3}   匹配 [0-9][0-9][0-9]  
{n,m}  至少匹配的次数  [0-9]{2,4} 匹配两位数到四位数
|      aaa{1sd|2sdsd}  匹配aaa1sd和aaa2sdsd 字符串
grep tom xx.txt --color
grep 'tom.*' xx.txt --color  匹配tom后面有任意字符的
egrep 'tom.+' xx.txt --color   tom b bbxx和tomxxxom
普通元字符 扩展元字符
.、*、[]等  +、?

贪婪匹配:+ *  过滤时做最长匹配
egrep 'btom+' xx.txt --color

懒惰匹配:？   过滤时做最短匹配
egrep 'btom?' xx.txt --color  可以结果是btom btomm btommm 但是有颜色的只有btom
egrep 'to.?m' xx.txt --color  可以结果是tomxxtom 两个tom有颜色xx没颜色  自己做实验

egrep '^[^Tt]..' xx.txt --color 排除开头是T或t的

匹配的是一个单词的开头用\<  egrep '\<tom' xx.txt
                  结尾用\>  egrep 'tom\>' xx.txt
对于单词 用\btom\b  只要tom这个明确的单词  tom的前后均没有其他字符 空格可以有
做标签，先定义一个符合规则的标签可引用这个标签的内容 \(\)  
例：grep '\(tom\)..\1' xx.txt 引用tom同时后面有两个字符 并再用一次tom
如果对出现匹配的字符做限制 \{n\}
例：grep 'tom.\{3\}' xx.txt  6个字符
    grep 'tom.\{1,3\}' xx.txt 给一个范围 4-6个字符
grep -R -n 
    递归 出现行号
还有一些国际字符写法
grep "[[:digit:]]" xx.txt 用来过滤数字的 其他的鸟哥书上好像有

过滤邮箱 xxx@xx.XX
grep -E '[a-z0-9]+@[a-z0-9]+\.[a-z]+' /var/log/maillog  --color
                           这个\是转义的意思 .就是点没有特殊含义
























































































